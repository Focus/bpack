!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
Config	src/config.hpp	/^class Config{$/;"	c
GET	src/qhttp.h	/^enum HTTPMETHOD{GET,POST};$/;"	e	enum:HTTPMETHOD
HTTPMETHOD	src/qhttp.h	/^enum HTTPMETHOD{GET,POST};$/;"	g
HttpGet	src/qhttp.c	/^struct HttpResponse HttpGet(struct HttpRequest req, enum LOGMETHOD logtype)$/;"	f
HttpRequest	src/qhttp.h	/^struct HttpRequest$/;"	s
HttpResponse	src/qhttp.h	/^struct HttpResponse$/;"	s
LOGMETHOD	src/qhttp.h	/^enum LOGMETHOD{LOGNONE,LOGMULTI,LOGSINGLE};$/;"	g
LOGMULTI	src/qhttp.h	/^enum LOGMETHOD{LOGNONE,LOGMULTI,LOGSINGLE};$/;"	e	enum:LOGMETHOD
LOGNONE	src/qhttp.h	/^enum LOGMETHOD{LOGNONE,LOGMULTI,LOGSINGLE};$/;"	e	enum:LOGMETHOD
LOGSINGLE	src/qhttp.h	/^enum LOGMETHOD{LOGNONE,LOGMULTI,LOGSINGLE};$/;"	e	enum:LOGMETHOD
MAX	src/installscript.cpp	45;"	d	file:
MIN	src/installscript.cpp	44;"	d	file:
MIN	src/qhttp.c	34;"	d	file:
POST	src/qhttp.h	/^enum HTTPMETHOD{GET,POST};$/;"	e	enum:HTTPMETHOD
Version	src/package.hpp	/^             version Version() const {return ver;}$/;"	f	class:package
_CONFIG_H	src/config.hpp	25;"	d
_ERROR_H	src/error.hpp	2;"	d
_HAVE_64_	src/hijack.c	35;"	d	file:
_INSTALLSCR_H_	src/installscript.hpp	25;"	d
_INSTALL_H_	src/install.hpp	25;"	d
_LIBC	src/hijack.c	39;"	d	file:
_LIBC	src/hijack.c	41;"	d	file:
_PACKAGE_H	src/package.hpp	25;"	d
_PACKINST_H	src/packinst.hpp	25;"	d
_REMOVE_H	src/remove.hpp	25;"	d
_SCAN_H	src/scan.hpp	25;"	d
_SEARCH_H	src/search.hpp	25;"	d
_STORAGE_H	src/storage.hpp	25;"	d
_TERMINAL_H_	src/terminal.hpp	25;"	d
_UPDATE_H_	src/update.hpp	25;"	d
_VERSION_H	src/version.hpp	25;"	d
addDep	src/packinst.hpp	/^             void addDep(const std::string pdep){deps.push_back(pdep);}   $/;"	f	class:packinst
addLocation	src/package.hpp	/^             void addLocation(const std::string plocation){locations.push_back(plocation);}$/;"	f	class:package
addheader	src/qhttp.c	/^void addheader(struct HttpRequest *req, const char* header)$/;"	f
addpostpair	src/qhttp.c	/^void addpostpair(struct HttpRequest *req, const char *key, const char *val)$/;"	f
archivename	src/packinst.hpp	/^              std::string name,wget,config,make,makeinst, archiveurl, archivename,conffile,conf,preinstall,postinstall;$/;"	m	class:packinst
archiveurl	src/packinst.hpp	/^              std::string name,wget,config,make,makeinst, archiveurl, archivename,conffile,conf,preinstall,postinstall;$/;"	m	class:packinst
asString	src/version.cpp	/^string version::asString() const{$/;"	f	class:version
asVector	src/version.hpp	/^             std::vector<int> asVector() const {return numbers;}$/;"	f	class:version
buildreq	src/qhttp.c	/^struct HttpRequest* buildreq(const char* url)$/;"	f
buildresponsehead	src/qhttp.c	/^struct HttpResponse buildresponsehead(const char* rawresp)$/;"	f
cflags	src/config.hpp	/^		static std::string installdir, scriptdir, packinstdir, tarballdir, packmandir, packlistpath, logdir,website,lib,coll,cflags,cxxflags;$/;"	m	class:Config
checkBreaks	src/storage.cpp	/^const void checkBreaks (vector<int> breaks){$/;"	f
clean	src/install.cpp	/^void clean(packinst pack){$/;"	f
clength	src/qhttp.h	/^    int clength;    \/\/ Content-Length$/;"	m	struct:HttpResponse
coll	src/config.hpp	/^		static std::string installdir, scriptdir, packinstdir, tarballdir, packmandir, packlistpath, logdir,website,lib,coll,cflags,cxxflags;$/;"	m	class:Config
collection	src/update.cpp	/^class collection$/;"	c	file:
collection	src/update.cpp	/^collection::collection(string url)$/;"	f	class:collection
conf	src/packinst.hpp	/^              std::string name,wget,config,make,makeinst, archiveurl, archivename,conffile,conf,preinstall,postinstall;$/;"	m	class:packinst
conffile	src/packinst.hpp	/^              std::string name,wget,config,make,makeinst, archiveurl, archivename,conffile,conf,preinstall,postinstall;$/;"	m	class:packinst
config	src/packinst.hpp	/^              std::string name,wget,config,make,makeinst, archiveurl, archivename,conffile,conf,preinstall,postinstall;$/;"	m	class:packinst
configuration	src/installscript.cpp	/^bool configuration(string config,string location){$/;"	f
creat	src/hijack.c	/^int creat(const char* path,mode_t mode){$/;"	f
creat64	src/hijack.c	/^int creat64 (const char* path,mode_t mode){$/;"	f
cxxflags	src/config.hpp	/^		static std::string installdir, scriptdir, packinstdir, tarballdir, packmandir, packlistpath, logdir,website,lib,coll,cflags,cxxflags;$/;"	m	class:Config
depVersion	src/install.cpp	/^void depVersion(string &dep, version &ver){$/;"	f
deps	src/packinst.hpp	/^              std::vector<std::string> deps;$/;"	m	class:packinst
dirTree	src/search.cpp	/^string dirTree(const string path){$/;"	f
erase	src/remove.cpp	/^int erase(string path){$/;"	f
erase	src/remove.cpp	/^int erase(vector<string> paths){$/;"	f
err	src/error.cpp	/^void err(std::string message, int level,bool errnoset){$/;"	f
errormsg	src/qhttp.h	/^	char *errormsg; \/\/ points to an error description if there is one$/;"	m	struct:HttpRequest
errormsg	src/qhttp.h	/^	char *errormsg; \/\/ points to an error description if there is one$/;"	m	struct:HttpResponse
fconnect	src/qhttp.c	/^int fconnect(char* ip,int port){$/;"	f
fopen	src/hijack.c	/^FILE* fopen (const char* path, const char* mode){$/;"	f
fopen64	src/hijack.c	/^FILE* fopen64(const char* path, const char* mode){$/;"	f
freopen	src/hijack.c	/^FILE* freopen (const char* path, const char* mode, FILE* file){$/;"	f
freopen64	src/hijack.c	/^FILE* freopen64 (const char* path, const char* mode, FILE* file){$/;"	f
ftpConvertAddy	src/qhttp.c	/^int ftpConvertAddy(char * buf, char * hostname, int * port) {$/;"	f
ftpGetFileSize	src/qhttp.c	/^int ftpGetFileSize(char* buffer){$/;"	f
ftpLogin	src/qhttp.c	/^struct HttpResponse ftpLogin(int socket){$/;"	f
ftpreadresponse	src/qhttp.c	/^char* ftpreadresponse(int socket)$/;"	f
ftpsend	src/qhttp.c	/^int ftpsend(int socket, char* command){$/;"	f
getArchiveName	src/packinst.hpp	/^             std::string getArchiveName() const {return archivename;}$/;"	f	class:packinst
getArchiveUrl	src/packinst.hpp	/^             std::string getArchiveUrl() const {return archiveurl;}$/;"	f	class:packinst
getBody	src/qhttp.c	/^char* getBody(struct HttpResponse *resp)$/;"	f
getCflags	src/config.hpp	/^		static std::string getCflags(){return cflags;}$/;"	f	class:Config
getColl	src/config.hpp	/^		static std::string getColl(){return coll;}$/;"	f	class:Config
getConf	src/packinst.hpp	/^             std::string getConf() const {return conf;}$/;"	f	class:packinst
getConfFile	src/packinst.hpp	/^             std::string getConfFile() const {return conffile;}$/;"	f	class:packinst
getConfig	src/packinst.hpp	/^             std::string getConfig() const {return config;}$/;"	f	class:packinst
getCxxflags	src/config.hpp	/^		static std::string getCxxflags(){return cxxflags;}$/;"	f	class:Config
getDeps	src/packinst.hpp	/^	     std::vector<std::string> getDeps(){return deps;}$/;"	f	class:packinst
getHeader	src/qhttp.c	/^int getHeader(struct HttpResponse *resp, char* key, char* value, int size)$/;"	f
getInstallDir	src/config.hpp	/^        static std::string getInstallDir() {return installdir;}$/;"	f	class:Config
getInstalledPackage	src/package.cpp	/^package getInstalledPackage(const string in){$/;"	f
getInstalledPackages	src/package.cpp	/^vector<package> getInstalledPackages(const char* location){$/;"	f
getLib	src/config.hpp	/^		static std::string getLib() {return lib;}$/;"	f	class:Config
getLoc	src/packinst.hpp	/^             int getLoc() const {return loc;}$/;"	f	class:packinst
getLocations	src/package.hpp	/^             std::vector<std::string> getLocations() const{return locations;} $/;"	f	class:package
getLogDir	src/config.hpp	/^        static std::string getLogDir() {return logdir;}$/;"	f	class:Config
getMake	src/packinst.hpp	/^             std::string getMake() const {return make;}$/;"	f	class:packinst
getMakeInst	src/packinst.hpp	/^             std::string getMakeInst() const {return makeinst;}$/;"	f	class:packinst
getMeta	src/packinst.hpp	/^	     bool getMeta(){return meta;}$/;"	f	class:packinst
getName	src/package.hpp	/^             std::string getName() const {return name;}$/;"	f	class:package
getName	src/packinst.hpp	/^             std::string getName() const {return name;}$/;"	f	class:packinst
getNextDep	src/packinst.cpp	/^bool packinst::getNextDep(string &dep)$/;"	f	class:packinst
getPack	src/scan.cpp	/^package getPack(const string pack)$/;"	f
getPackInstDir	src/config.hpp	/^        static std::string getPackInstDir() {return packinstdir;}$/;"	f	class:Config
getPackage	src/packinst.cpp	/^packinst getPackage(string location){$/;"	f
getPacklistPath	src/config.hpp	/^        static std::string getPacklistPath() {return packlistpath;}$/;"	f	class:Config
getPackmanDir	src/config.hpp	/^        static std::string getPackmanDir() {return packmandir;}$/;"	f	class:Config
getPostInstall	src/packinst.hpp	/^             std::string getPostInstall() const {return postinstall;}$/;"	f	class:packinst
getPreInstall	src/packinst.hpp	/^             std::string getPreInstall() const {return preinstall;}$/;"	f	class:packinst
getQuit	src/config.hpp	/^		static int getQuit() {return quitlevel;}$/;"	f	class:Config
getScan	src/package.hpp	/^             bool getScan() const {return scan;}$/;"	f	class:package
getScriptDir	src/config.hpp	/^        static std::string getScriptDir() {return scriptdir;}$/;"	f	class:Config
getTarballDir	src/config.hpp	/^        static std::string getTarballDir() {return tarballdir;}$/;"	f	class:Config
getVersion	src/package.hpp	/^             std::string getVersion() const {return ver.asString();}$/;"	f	class:package
getVersion	src/packinst.hpp	/^             std::string getVersion() const {return ver.asString();}$/;"	f	class:packinst
getWget	src/packinst.hpp	/^             std::string getWget() const {return wget;}$/;"	f	class:packinst
greatestVer	src/install.cpp	/^string greatestVer(vector<string> bushsucks, string realname){$/;"	f
help	src/main.cpp	/^void help()$/;"	f
hiinit	src/hijack.c	/^void hiinit (){$/;"	f
host	src/qhttp.h	/^    char *host;     \/\/ eg. www.bpack.co.uk$/;"	m	struct:HttpRequest
httpreadresponse	src/qhttp.c	/^struct HttpResponse httpreadresponse(int socket)$/;"	f
httpsend	src/qhttp.c	/^int httpsend(int socket, struct HttpRequest *req)$/;"	f
initialise	src/config.cpp	/^void Config::initialise()$/;"	f	class:Config
install	src/install.cpp	/^void install(string packname, int bail){$/;"	f
installScript	src/installscript.cpp	/^bool installScript(packinst inst, int bail=-1)$/;"	f
installdir	src/config.hpp	/^		static std::string installdir, scriptdir, packinstdir, tarballdir, packmandir, packlistpath, logdir,website,lib,coll,cflags,cxxflags;$/;"	m	class:Config
lib	src/config.hpp	/^		static std::string installdir, scriptdir, packinstdir, tarballdir, packmandir, packlistpath, logdir,website,lib,coll,cflags,cxxflags;$/;"	m	class:Config
link	src/hijack.c	/^int link (const char* path1, const char* path2){$/;"	f
list	src/search.cpp	/^int list(const char* name, const struct stat *sp, int type){$/;"	f
loadLocation	src/storage.cpp	/^vector<string> loadLocation(const string locations)$/;"	f
loc	src/packinst.hpp	/^              int loc;$/;"	m	class:packinst
locations	src/package.hpp	/^              std::vector<std::string> locations;$/;"	m	class:package
logdir	src/config.hpp	/^		static std::string installdir, scriptdir, packinstdir, tarballdir, packmandir, packlistpath, logdir,website,lib,coll,cflags,cxxflags;$/;"	m	class:Config
logger	src/qhttp.c	/^void logger(enum LOGMETHOD logtype, const char* msg)$/;"	f
logger2	src/qhttp.c	/^void logger2(enum LOGMETHOD logtype, const char* msg, const char*msg2)$/;"	f
logme	src/hijack.c	/^inline static void logme(const char* path){$/;"	f	file:
macro	src/storage.cpp	/^string macro(string command){$/;"	f
macroif	src/storage.cpp	/^string macroif(vector<string> statement){$/;"	f
main	src/main.cpp	/^int main(int argc, char *argv[]){$/;"	f
make	src/packinst.hpp	/^              std::string name,wget,config,make,makeinst, archiveurl, archivename,conffile,conf,preinstall,postinstall;$/;"	m	class:packinst
makeinst	src/packinst.hpp	/^              std::string name,wget,config,make,makeinst, archiveurl, archivename,conffile,conf,preinstall,postinstall;$/;"	m	class:packinst
makeinstall	src/terminal.cpp	/^int makeinstall(string path){$/;"	f
meta	src/packinst.hpp	/^	      bool meta;$/;"	m	class:packinst
method	src/qhttp.h	/^    enum HTTPMETHOD method;$/;"	m	struct:HttpRequest	typeref:enum:HttpRequest::HTTPMETHOD
mknod	src/hijack.c	/^int mknod (const char* path1, mode_t path2,dev_t devy){$/;"	f
mrt	src/main.cpp	/^void mrt()$/;"	f
name	src/package.hpp	/^              std::string name;$/;"	m	class:package
name	src/packinst.hpp	/^              std::string name,wget,config,make,makeinst, archiveurl, archivename,conffile,conf,preinstall,postinstall;$/;"	m	class:packinst
numbers	src/version.hpp	/^             std::vector<int> numbers; $/;"	m	class:version
open	src/hijack.c	/^int open(const char* path,int flags, ...){$/;"	f
open64	src/hijack.c	/^int open64 (const char* path,int flags, ...){$/;"	f
operator +=	src/update.cpp	/^void collection::operator+=(const collection &coll)$/;"	f	class:collection
operator -=	src/update.cpp	/^void collection::operator-=(vector<string> &rempacks)$/;"	f	class:collection
operator <	src/version.cpp	/^bool version::operator< (const string str) const{$/;"	f	class:version
operator <	src/version.cpp	/^bool version::operator< (const version ver) const{$/;"	f	class:version
operator <<	src/version.cpp	/^ofstream& operator<< (ofstream& ioo, version& ver){$/;"	f
operator <<	src/version.cpp	/^ostream& operator<< (ostream& ioo, version& ver){$/;"	f
operator <=	src/version.cpp	/^bool version::operator<= (const string str) const{$/;"	f	class:version
operator <=	src/version.cpp	/^bool version::operator<= (const version ver) const{$/;"	f	class:version
operator =	src/version.cpp	/^void version::operator= (const string str){$/;"	f	class:version
operator ==	src/version.cpp	/^bool version::operator== (const string str) const{$/;"	f	class:version
operator ==	src/version.cpp	/^bool version::operator== (const version ver) const$/;"	f	class:version
operator >	src/version.cpp	/^bool version::operator> (const string str) const{$/;"	f	class:version
operator >	src/version.cpp	/^bool version::operator> (const version ver) const{$/;"	f	class:version
operator >=	src/version.cpp	/^bool version::operator>= (const string str) const{$/;"	f	class:version
operator >=	src/version.cpp	/^bool version::operator>= (const version ver) const{$/;"	f	class:version
packSize	src/package.cpp	/^string packSize(vector<string> locs){$/;"	f
package	src/package.cpp	/^package::package(const packinst inst)$/;"	f	class:package
package	src/package.cpp	/^package::package(const string pname)$/;"	f	class:package
package	src/package.cpp	/^package::package(const string pname,const vector<string> plocations)$/;"	f	class:package
package	src/package.hpp	/^             package(){scan=0;}$/;"	f	class:package
package	src/package.hpp	/^class package$/;"	c
packinst	src/packinst.hpp	/^             packinst(){loc=0;}$/;"	f	class:packinst
packinst	src/packinst.hpp	/^class packinst{$/;"	c
packinstdir	src/config.hpp	/^		static std::string installdir, scriptdir, packinstdir, tarballdir, packmandir, packlistpath, logdir,website,lib,coll,cflags,cxxflags;$/;"	m	class:Config
packlistpath	src/config.hpp	/^		static std::string installdir, scriptdir, packinstdir, tarballdir, packmandir, packlistpath, logdir,website,lib,coll,cflags,cxxflags;$/;"	m	class:Config
packmandir	src/config.hpp	/^		static std::string installdir, scriptdir, packinstdir, tarballdir, packmandir, packlistpath, logdir,website,lib,coll,cflags,cxxflags;$/;"	m	class:Config
packs	src/update.cpp	/^		map<std::string, std::string> packs;$/;"	m	class:collection	file:
path	src/qhttp.h	/^    char *path;     \/\/ eg. \/foo\/bar.htm$/;"	m	struct:HttpRequest
port	src/qhttp.h	/^    unsigned short port;$/;"	m	struct:HttpRequest
postinstall	src/packinst.hpp	/^              std::string name,wget,config,make,makeinst, archiveurl, archivename,conffile,conf,preinstall,postinstall;$/;"	m	class:packinst
preinstall	src/packinst.hpp	/^              std::string name,wget,config,make,makeinst, archiveurl, archivename,conffile,conf,preinstall,postinstall;$/;"	m	class:packinst
printPackages	src/package.cpp	/^void printPackages(const vector<package> packagelist)$/;"	f
process	src/qhttp.c	/^process(const char* name,float per){$/;"	f
protocol	src/qhttp.h	/^	char *protocol; \/\/ $/;"	m	struct:HttpRequest
quitlevel	src/config.cpp	/^int Config::quitlevel;$/;"	m	class:Config	file:
quitlevel	src/config.hpp	/^		static int quitlevel;$/;"	m	class:Config
rawheader	src/qhttp.h	/^    char *rawheader;\/\/ Raw http response header$/;"	m	struct:HttpResponse
rawheader	src/qhttp.h	/^    char *rawheader;\/\/ eachline terminated with \/r\/n, Host & Content-Length added automatically$/;"	m	struct:HttpRequest
rawpost	src/qhttp.h	/^    char *rawpost;  \/\/ FIXME: can only post text$/;"	m	struct:HttpRequest
rawrequest	src/qhttp.c	/^char* rawrequest(struct HttpRequest *req)$/;"	f
read	src/storage.cpp	/^vector<string> read(const string location){$/;"	f
remove	src/package.cpp	/^bool package::remove(){$/;"	f	class:package
removeDep	src/packinst.hpp	/^             void removeDep(const int deppos){deps.erase(deps.begin()+deppos-1);loc--;}$/;"	f	class:packinst
removePack	src/remove.cpp	/^int removePack(string pack){$/;"	f
rename	src/hijack.c	/^int rename (const char* path1, const char* path2){$/;"	f
saveall	src/update.cpp	/^void collection::saveall(string path)$/;"	f	class:collection
scan	src/package.hpp	/^              bool scan;$/;"	m	class:package
scan	src/scan.cpp	/^void scan()$/;"	f
sconnect	src/qhttp.c	/^int sconnect(struct HttpRequest req)$/;"	f
scriptdir	src/config.hpp	/^		static std::string installdir, scriptdir, packinstdir, tarballdir, packmandir, packlistpath, logdir,website,lib,coll,cflags,cxxflags;$/;"	m	class:Config
search	src/search.cpp	/^string search(string dir, string name){$/;"	f
separate	src/storage.cpp	/^int separate(const string text,vector<string> &par,const int start){   $/;"	f
setConf	src/packinst.hpp	/^             void setConf(const std::string pname){conf=pname;}$/;"	f	class:packinst
setConfFile	src/packinst.hpp	/^             void setConfFile(const std::string pname){conffile=pname;}$/;"	f	class:packinst
setConfig	src/packinst.hpp	/^             void setConfig(const std::string pconfig){config=pconfig;}$/;"	f	class:packinst
setDeps	src/packinst.hpp	/^             void setDeps(const std::vector<std::string> pdeps){deps=pdeps;}$/;"	f	class:packinst
setLocations	src/package.hpp	/^             void setLocations(const std::vector<std::string> plocations){locations=plocations;}$/;"	f	class:package
setMake	src/packinst.hpp	/^             void setMake(const std::string pmake){make=pmake;}$/;"	f	class:packinst
setMakeInst	src/packinst.hpp	/^             void setMakeInst(const std::string pmakeinst){makeinst=pmakeinst;}$/;"	f	class:packinst
setMeta	src/packinst.hpp	/^	     void setMeta(bool value){meta=value;}$/;"	f	class:packinst
setMeta	src/packinst.hpp	/^	     void setMeta(std::string value){$/;"	f	class:packinst
setName	src/package.hpp	/^             void setName(const std::string pname){name=pname;}$/;"	f	class:package
setName	src/packinst.hpp	/^             void setName(const std::string pname){name=pname;}$/;"	f	class:packinst
setPostInstall	src/packinst.hpp	/^             void setPostInstall(const std::string pname){postinstall=pname;}$/;"	f	class:packinst
setPreInstall	src/packinst.hpp	/^             void setPreInstall(const std::string pinst){preinstall=pinst;}$/;"	f	class:packinst
setScan	src/package.hpp	/^             void setScan(const bool pscan){scan=pscan;}$/;"	f	class:package
setVersion	src/package.hpp	/^             void setVersion(const std::string pname){ver=pname;}$/;"	f	class:package
setVersion	src/packinst.hpp	/^	     void setVersion(const version vers){ver=vers;}$/;"	f	class:packinst
setVersion	src/packinst.hpp	/^             void setVersion(const std::string pversion){ver=pversion;}$/;"	f	class:packinst
setVersion	src/version.cpp	/^void version::setVersion(string ver)$/;"	f	class:version
setVersion	src/version.hpp	/^             void setVersion(std::vector<int> vec){numbers=vec;}$/;"	f	class:version
setWget	src/packinst.hpp	/^             void setWget(const std::string pwget)$/;"	f	class:packinst
socket	src/qhttp.h	/^    int socket;$/;"	m	struct:HttpRequest
stcode	src/qhttp.h	/^    int stcode;     \/\/ Http response code$/;"	m	struct:HttpResponse
stream	src/qhttp.h	/^    int stream;$/;"	m	struct:HttpResponse
streason	src/qhttp.h	/^    char *streason; \/\/ Http reason code$/;"	m	struct:HttpResponse
stripCp	src/install.cpp	/^vector<string> stripCp(){$/;"	f
symlink	src/hijack.c	/^int symlink (const char* path1, const char* path2){$/;"	f
tarName	src/installscript.cpp	/^string tarName(string url){$/;"	f
tarballdir	src/config.hpp	/^		static std::string installdir, scriptdir, packinstdir, tarballdir, packmandir, packlistpath, logdir,website,lib,coll,cflags,cxxflags;$/;"	m	class:Config
terminal	src/terminal.cpp	/^void terminal(){$/;"	f
true_creat	src/hijack.c	/^static int   (*true_creat)   (const char*, mode_t);$/;"	v	file:
true_creat64	src/hijack.c	/^static int   (*true_creat64)   (const char*, mode_t);$/;"	v	file:
true_fopen	src/hijack.c	/^static FILE* (*true_fopen)   (const char*, const char*);$/;"	v	file:
true_fopen64	src/hijack.c	/^static FILE* (*true_fopen64)   (const char*, const char*);$/;"	v	file:
true_freopen	src/hijack.c	/^static FILE* (*true_freopen) (const char*, const char* ,FILE*);$/;"	v	file:
true_freopen64	src/hijack.c	/^static FILE* (*true_freopen64) (const char*, const char* ,FILE*);$/;"	v	file:
true_link	src/hijack.c	/^static int   (*true_link)    (const char*, const char*);$/;"	v	file:
true_mknod	src/hijack.c	/^static int   (*true_mknod)   (const char*, mode_t, dev_t);$/;"	v	file:
true_open	src/hijack.c	/^static int   (*true_open)    (const char*, int, ...);$/;"	v	file:
true_open64	src/hijack.c	/^static int   (*true_open64)    (const char*, int, ...);$/;"	v	file:
true_rename	src/hijack.c	/^static int   (*true_rename)  (const char*, const char*);$/;"	v	file:
true_symlink	src/hijack.c	/^static int   (*true_symlink) (const char*, const char*);$/;"	v	file:
true_truncate	src/hijack.c	/^static int   (*true_truncate)(const char*, off_t);$/;"	v	file:
truncate	src/hijack.c	/^int truncate (const char* path, off_t len){$/;"	f
update	src/update.cpp	/^void update()$/;"	f
ver	src/package.hpp	/^              version ver;$/;"	m	class:package
ver	src/packinst.hpp	/^	      version ver;$/;"	m	class:packinst
version	src/version.cpp	/^version::version()$/;"	f	class:version
version	src/version.cpp	/^version::version(const string ver )$/;"	f	class:version
version	src/version.hpp	/^class version{$/;"	c
versionSet	src/scan.cpp	/^void versionSet(package &pack)$/;"	f
website	src/config.hpp	/^		static std::string installdir, scriptdir, packinstdir, tarballdir, packmandir, packlistpath, logdir,website,lib,coll,cflags,cxxflags;$/;"	m	class:Config
wget	src/packinst.hpp	/^              std::string name,wget,config,make,makeinst, archiveurl, archivename,conffile,conf,preinstall,postinstall;$/;"	m	class:packinst
wget	src/qhttp.c	/^int wget(const char* url, const char* dir, const char* filename, enum LOGMETHOD logtype)$/;"	f
write	src/package.cpp	/^bool package::write(){$/;"	f	class:package
write	src/storage.cpp	/^bool write(const string content, const string location,bool overwrite){$/;"	f
~package	src/package.hpp	/^             ~package(){}$/;"	f	class:package
~packinst	src/packinst.hpp	/^             ~packinst(){}$/;"	f	class:packinst
~version	src/version.cpp	/^version::~version(){$/;"	f	class:version
